"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var shell = require('shelljs');
var fs = require('fs-extra');
var path = require('path');
var abi2reducks_1 = __importDefault(require("@eximchain/abi2reducks"));
var utils_1 = require("./utils");
var handlebars_1 = require("./handlebars");
var build = function (data) {
    shell.cd(data.DAPP_DIR);
    shell.exec('npm run build');
};
var start = function (data) {
    shell.cd(data.DAPP_DIR);
    shell.exec('npm run start');
};
exports.generate = function (input, options) {
    if (options === void 0) { options = { build: false, start: false }; }
    var data = exports.getDappSmithData(input);
    fs.ensureDirSync(data.START_DIR);
    shell.cd("" + data.START_DIR);
    if (shell.exec("npx create-react-app " + data.DAPP_NAME + " --typescript").code == 0) {
        fs.copySync(path.resolve(__dirname, '../tsconfig.json'), data.DAPP_DIR + "/tsconfig.json");
        fs.ensureDirSync(data.DAPP_NAME);
        shell.cd(data.DAPP_NAME);
        installPackages(data);
        shell.cd(data.SRC_DIR);
        fs.removeSync('App.js');
        initRedux(data);
        initComponents(data);
        shell.cd(data.SRC_DIR);
        fs.ensureDirSync("fonts");
        fs.copySync(data.DAPPSRC_DIR + "/SampleApp.tsx", data.SRC_DIR + "/App.tsx");
        fs.copySync(data.DAPPSRC_DIR + "/fonts.css", data.SRC_DIR + "/fonts.css");
        fs.copySync(data.DAPPSRC_DIR + "/app.css", data.SRC_DIR + "/app.css");
        fs.copySync(data.DAPPSRC_DIR + "/fonts", data.SRC_DIR + "/fonts");
        fs.copySync(data.DAPPSRC_DIR + "/variable.css", data.SRC_DIR + "/variable.css");
        fs.writeJsonSync('./Contract.json', data.ABI);
        shell.cd(data.DAPP_DIR);
        shell.exec('git add -A; git commit -m "Initial codegen commit"');
        if (options.build) {
            build(data);
        }
        if (options.start) {
            start(data);
        }
    }
    else {
        console.log("\n\nERROR ON 'npm init react-app " + data.DAPP_NAME + "', failing out.");
    }
};
var REQUIRED_PACKAGES = [
    'redux',
    'react-redux',
    'redux-react-hook',
    'redux-starter-kit',
    '@types/node',
    '@types/react',
    '@types/react-dom',
    '@types/react-redux',
    '@types/jest',
    '@types/classnames',
    '@types/styled-components@^4.1.12',
    'ethereumjs-util',
    'ethereum-types',
    'bignumber.js',
    'classnames',
    'styled-components@^3.2.3',
    'typescript',
    'lodash.keyby',
    'lodash.merge',
    'lodash.sortby',
    'fs-extra',
    'web3-utils',
    'web3',
    'string-similarity'
];
var installPackages = function (data) {
    shell.cd(data.DAPP_DIR);
    shell.exec("npm i --save " + REQUIRED_PACKAGES.join(' '));
};
var initRedux = function (data) {
    shell.cd(data.SRC_DIR);
    fs.ensureDirSync('state');
    shell.cd(data.REDUX_DIR);
    abi2reducks_1.default.generate({
        abi: data.ABI,
        address: data.CONTRACT_ADDR,
        web3URL: data.WEB3_URL
    });
};
var initComponents = function (data) {
    shell.cd(data.SRC_DIR);
    utils_1.nestedCreateDir('components', function () {
        utils_1.writeTemplateToPath('./templates/root_component_index.hbs', 'index.tsx');
        fs.copySync(data.DAPPSRC_COMPONENTS_DIR + "/layout", data.COMPONENTS_DIR + "/layout");
        fs.copySync(data.DAPPSRC_COMPONENTS_DIR + "/reusable", data.COMPONENTS_DIR + "/reusable");
        utils_1.nestedCreateDir('txMethods', function () {
            utils_1.writeTemplateToPath('./templates/txMethods_index.hbs', 'index.tsx');
            utils_1.nestedCreateDir('reads', function () {
                utils_1.writeTemplateToPath('./templates/components_index.hbs', 'index.tsx', { methods: data.readFxns });
                utils_1.writeTemplateToPath('./templates/nameToComponent.hbs', 'nameToComponent.tsx', { methods: data.readFxns });
                data.readFxns.forEach(function (fxn) {
                    utils_1.writeTemplateToPath('./templates/readComponent.hbs', handlebars_1.pascalCase(fxn.name) + ".tsx", utils_1.componentTemplateArgs(fxn));
                });
            });
            utils_1.nestedCreateDir('writes', function () {
                utils_1.writeTemplateToPath('./templates/components_index.hbs', 'index.tsx', { methods: data.writeFxns });
                utils_1.writeTemplateToPath('./templates/nameToComponent.hbs', 'nameToComponent.tsx', { methods: data.writeFxns });
                data.writeFxns.forEach(function (fxn) {
                    utils_1.writeTemplateToPath('./templates/writeComponent.hbs', handlebars_1.pascalCase(fxn.name) + ".tsx", utils_1.componentTemplateArgs(fxn));
                });
            });
        });
    });
};
exports.getDappSmithData = function (_a) {
    var name = _a.name, abi = _a.abi, contract_addr = _a.contract_addr, web3URL = _a.web3URL;
    var cwd = process.cwd();
    var dappName = name.toLowerCase() + "-dapp";
    var abiFxns = abi.filter(function (fxn) { return fxn.type === 'function'; });
    return {
        CONTRACT_NAME: name,
        DAPP_NAME: dappName,
        START_DIR: cwd,
        DAPP_DIR: cwd + "/" + dappName,
        SRC_DIR: cwd + "/" + dappName + "/src",
        COMPONENTS_DIR: cwd + "/" + dappName + "/src/components",
        REDUX_DIR: cwd + "/" + dappName + "/src/state",
        DAPPSRC_DIR: path.resolve(__dirname, '../src/dappSrc'),
        DAPPSRC_COMPONENTS_DIR: path.resolve(__dirname, '../src/dappSrc/components'),
        CONTRACT_ADDR: contract_addr,
        WEB3_URL: web3URL,
        ABI: abiFxns,
        readFxns: abiFxns.filter(function (fxn) { return fxn.constant; }),
        writeFxns: abiFxns.filter(function (fxn) { return !fxn.constant; })
    };
};
//# sourceMappingURL=DappSmith.js.map