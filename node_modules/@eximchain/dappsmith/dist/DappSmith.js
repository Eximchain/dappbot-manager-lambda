"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var shell = require('shelljs');
var fs = require('fs-extra');
var path = require('path');
var abi2reducks_1 = __importDefault(require("@eximchain/abi2reducks"));
var utils_1 = require("./utils");
var handlebars_1 = require("./handlebars");
var REQUIRED_PACKAGES = [
    'redux',
    'react-redux',
    'redux-react-hook',
    'redux-starter-kit',
    '@types/react',
    '@types/react-dom',
    '@types/react-redux',
    '@types/jest',
    '@types/classnames',
    '@types/styled-components@^4.1.12',
    'ethereumjs-util',
    'ethereum-types',
    'bignumber.js',
    'classnames',
    'styled-components@^3.2.3',
    'typescript',
    'lodash.keyby',
    'lodash.merge',
    'lodash.sortby',
    'fs-extra',
    'web3-utils',
    'web3',
    'string-similarity'
];
var DappSmith = /** @class */ (function () {
    function DappSmith(_a) {
        var name = _a.name, abi = _a.abi, contract_addr = _a.contract_addr, web3URL = _a.web3URL;
        var _this = this;
        this.installPackages = function () {
            shell.cd(_this.DAPP_DIR);
            shell.exec("npm i --save " + REQUIRED_PACKAGES.join(' '));
        };
        this.initRedux = function () {
            shell.cd(_this.SRC_DIR);
            fs.ensureDirSync('state');
            shell.cd(_this.REDUX_DIR);
            var duckGen = new abi2reducks_1.default({
                abi: _this.ABI,
                address: _this.CONTRACT_ADDR,
                web3URL: _this.WEB3_URL
            });
            duckGen.generate();
        };
        this.initComponents = function () {
            shell.cd(_this.SRC_DIR);
            _this.nestedCreateDir('components', function () {
                utils_1.writeTemplateToPath('./templates/root_component_index.hbs', 'index.tsx');
                fs.copySync(_this.DAPPSRC_COMPONENTS_DIR + "/layout", _this.COMPONENTS_DIR + "/layout");
                fs.copySync(_this.DAPPSRC_COMPONENTS_DIR + "/reusable", _this.COMPONENTS_DIR + "/reusable");
                _this.nestedCreateDir('txMethods', function () {
                    utils_1.writeTemplateToPath('./templates/txMethods_index.hbs', 'index.tsx');
                    _this.nestedCreateDir('reads', function () {
                        utils_1.writeTemplateToPath('./templates/components_index.hbs', 'index.tsx', { methods: _this.readFxns });
                        utils_1.writeTemplateToPath('./templates/nameToComponent.hbs', 'nameToComponent.tsx', { methods: _this.readFxns });
                        _this.readFxns.forEach(function (fxn) {
                            utils_1.writeTemplateToPath('./templates/readComponent.hbs', handlebars_1.pascalCase(fxn.name) + ".tsx", _this.componentTemplateArgs(fxn));
                        });
                    });
                    _this.nestedCreateDir('writes', function () {
                        utils_1.writeTemplateToPath('./templates/components_index.hbs', 'index.tsx', { methods: _this.writeFxns });
                        utils_1.writeTemplateToPath('./templates/nameToComponent.hbs', 'nameToComponent.tsx', { methods: _this.writeFxns });
                        _this.writeFxns.forEach(function (fxn) {
                            utils_1.writeTemplateToPath('./templates/writeComponent.hbs', handlebars_1.pascalCase(fxn.name) + ".tsx", _this.componentTemplateArgs(fxn));
                        });
                    });
                });
            });
        };
        this.componentTemplateArgs = function (method) {
            return {
                method: method,
                camelName: handlebars_1.camelCase(method.name),
                pascalName: handlebars_1.pascalCase(method.name)
            };
        };
        this.nestedCreateDir = function (dirName, nestedActions) {
            if (nestedActions === void 0) { nestedActions = function () { }; }
            fs.ensureDirSync(dirName);
            shell.cd(dirName);
            nestedActions();
            shell.cd('..');
        };
        this.CONTRACT_NAME = name;
        this.ABI = abi.filter(function (fxn) { return fxn.type === 'function'; });
        this.DAPP_NAME = this.CONTRACT_NAME.toLowerCase() + "-dapp";
        this.START_DIR = process.cwd();
        this.DAPP_DIR = this.START_DIR + "/" + this.DAPP_NAME;
        this.SRC_DIR = this.DAPP_DIR + "/src";
        this.COMPONENTS_DIR = this.SRC_DIR + "/components";
        this.REDUX_DIR = this.SRC_DIR + "/state";
        this.TX_DUCKS_DIR = this.REDUX_DIR + "/txDucks";
        this.readFxns = this.ABI.filter(function (fxn) { return fxn.constant; });
        this.writeFxns = this.ABI.filter(function (fxn) { return !fxn.constant; });
        this.DAPPSRC_DIR = path.resolve(__dirname, '../src/dappSrc');
        this.DAPPSRC_COMPONENTS_DIR = path.resolve(this.DAPPSRC_DIR, 'components');
        this.CONTRACT_ADDR = contract_addr;
        this.WEB3_URL = web3URL;
    }
    DappSmith.prototype.generate = function () {
        fs.ensureDirSync(this.START_DIR);
        shell.cd("" + this.START_DIR);
        if (shell.exec("npm init react-app " + this.DAPP_NAME + " --typescript").code == 0) {
            fs.copySync(path.resolve(__dirname, '../tsconfig.json'), this.DAPP_DIR + "/tsconfig.json");
            fs.ensureDirSync(this.DAPP_NAME);
            shell.cd(this.DAPP_NAME);
            this.installPackages();
            shell.cd(this.SRC_DIR);
            fs.removeSync('App.js');
            this.initRedux();
            this.initComponents();
            shell.cd(this.SRC_DIR);
            fs.ensureDirSync("fonts");
            fs.copySync(this.DAPPSRC_DIR + "/SampleApp.tsx", this.SRC_DIR + "/App.tsx");
            fs.copySync(this.DAPPSRC_DIR + "/fonts.css", this.SRC_DIR + "/fonts.css");
            fs.copySync(this.DAPPSRC_DIR + "/app.css", this.SRC_DIR + "/app.css");
            fs.copySync(this.DAPPSRC_DIR + "/fonts", this.SRC_DIR + "/fonts");
            fs.copySync(this.DAPPSRC_DIR + "/variable.css", this.SRC_DIR + "/variable.css");
            fs.writeJsonSync('./Contract.json', this.ABI);
            shell.cd(this.DAPP_DIR);
            shell.exec('git add -A; git commit -m "Initial codegen commit"');
        }
        else {
            console.log("\n\nERROR ON 'npm init react-app " + this.DAPP_NAME + "', failing out.");
        }
    };
    DappSmith.prototype.build = function () {
        shell.cd(this.DAPP_DIR);
        shell.exec('npm run build');
    };
    DappSmith.prototype.start = function () {
        shell.cd(this.DAPP_DIR);
        shell.exec('npm run start');
    };
    return DappSmith;
}());
exports.default = DappSmith;
//# sourceMappingURL=DappSmith.js.map