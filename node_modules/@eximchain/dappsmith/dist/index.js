#! /usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var DappSmith_1 = require("./DappSmith");
var fs = require("fs");
var path = require("path");
var program = require('commander');
var shell = require('shelljs');
var npmPackage = JSON.parse(fs.readFileSync(path.resolve(__dirname, './../package.json')));
var CALLING_DIR = process.cwd();
program
    .name('dappsmith')
    .version(npmPackage.version)
    .description(npmPackage.description)
    .option('-s, --start', 'Start the Dapp once it has been generated.  Happens after build if both options are specified.')
    .option('-b, --build', 'Build the Dapp once it has been generated.  Happens before start if both options are specified.')
    .usage('<contract_name> <contract_path> <contract_addr> <web3URL> [options]')
    .action(function (contract_name, contract_path, contract_addr, web3URL, options) {
    if (options === void 0) { options = {}; }
    if (process.cwd() !== CALLING_DIR) {
        shell.cd(CALLING_DIR);
    }
    if ([contract_name, contract_path, contract_addr, web3URL].some(function (variable) { return typeof variable !== 'string'; })) {
        console.log("  Dappsmith must be called with (1) a low-cased contract name, (2) a path to its ABI JSON, (3) the contract's deployed address, and (4) an HTTPProvider URL.  Please make sure you've provided all of these values.");
        return false;
    }
    var abi = JSON.parse(fs.readFileSync(contract_path)).filter(function (fxn) { return fxn.type === 'function'; });
    var input = { abi: abi, name: contract_name, contract_addr: contract_addr, web3URL: web3URL };
    DappSmith_1.generate(input, {
        build: options.build,
        start: options.start
    });
});
program.on('--help', function () {
    console.log('');
    console.log('  Call with the name of your contract (lo-case) and a path to its ABI.  Will generate the DApp in a folder named `[contract-name]-dapp`.');
    console.log('');
});
if (require.main === module) {
    var args = process.argv.slice(2);
    if (args.length == 0) {
        program.help();
    }
    else {
        program.parse(process.argv);
    }
}
exports.default = { generate: DappSmith_1.generate };
//# sourceMappingURL=index.js.map