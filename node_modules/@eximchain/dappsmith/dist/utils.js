"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var shell = require('shelljs');
var fs = require('fs-extra');
var path = require('path');
var handlebars_1 = __importStar(require("./handlebars"));
exports.titleCase = function (str) {
    var cameled = handlebars_1.camelCase(str);
    return cameled[0].toUpperCase() + cameled.slice(1);
};
exports.loadTemplate = function (templatePath) {
    return String(fs.readFileSync(path.resolve(__dirname, templatePath)));
};
exports.writeTemplateToPath = function (templatePath, filePath, templateArg) {
    if (templateArg === void 0) { templateArg = {}; }
    var templateCode = handlebars_1.default.compile(exports.loadTemplate(templatePath))(templateArg);
    fs.writeFileSync(filePath, templateCode);
};
exports.componentTemplateArgs = function (method) {
    return {
        method: method,
        camelName: handlebars_1.camelCase(method.name),
        pascalName: handlebars_1.pascalCase(method.name)
    };
};
exports.nestedCreateDir = function (dirName, nestedActions) {
    if (nestedActions === void 0) { nestedActions = function () { }; }
    fs.ensureDirSync(dirName);
    shell.cd(dirName);
    nestedActions();
    shell.cd('..');
};
//# sourceMappingURL=utils.js.map