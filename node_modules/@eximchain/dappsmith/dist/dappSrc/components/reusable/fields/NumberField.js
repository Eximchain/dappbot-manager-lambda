"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importStar(require("react"));
var shared_1 = require("./shared");
var TextField_1 = __importDefault(require("../ui/TextField"));
var BigNum = require('bignumber.js');
var isValidFactory = function (size) {
    var validator, errMsg;
    // If the size has a number in it, parse that.  If not, (u)int aliases to (u)int256 
    var isSigned = size.charAt(0) === 'i';
    var numBits = /[0-9]/.test(size) ? parseInt(isSigned ? size.slice(3) : size.slice(4)) : 256;
    if (size.charAt(0) === 'u') {
        var maxVal_1 = new BigNum(2).exponentiatedBy(numBits);
        validator = function (newVal) {
            var val = new BigNum(newVal);
            return val.lte(maxVal_1) && val.gte(0);
        };
        errMsg = "Please enter a number between 0 and " + maxVal_1 + ".";
    }
    else {
        var maxMagnitude_1 = new BigNum(2).exponentiatedBy(numBits - 1);
        validator = function (newVal) {
            var val = new BigNum(newVal);
            return val.gte(maxMagnitude_1.negated()) && val.lte(maxMagnitude_1);
        };
        errMsg = "Please enter a number between -" + maxMagnitude_1 + " and " + maxMagnitude_1 + ".";
    }
    return [validator, errMsg];
};
exports.NumberField = function (_a) {
    var value = _a.value, onChange = _a.onChange, name = _a.name, displayName = _a.displayName, size = _a.size, props = __rest(_a, ["value", "onChange", "name", "displayName", "size"]);
    var _b = __read(react_1.useState(""), 2), errMsg = _b[0], setErrMsg = _b[1];
    var _c = __read(isValidFactory(size), 2), isValid = _c[0], wrongSizeErr = _c[1];
    var updater = shared_1.inputUpdater(onChange, {
        withError: setErrMsg,
        clean: function (newVal) { return newVal.replace(/[^0-9.]/g, ""); }
    });
    var validator = shared_1.inputValidator(isValid, setErrMsg, wrongSizeErr);
    return (react_1.default.createElement("div", { className: 'fieldGroup' },
        react_1.default.createElement("p", { className: "caption" }, displayName),
        react_1.default.createElement(TextField_1.default, { type: 'number', id: name, name: name, value: value, disabled: props.disabled, hasError: errMsg != "", errorMessage: errMsg, onChange: updater, onBlur: validator })));
};
exports.NumberField.defaultProps = { disabled: false };
exports.default = exports.NumberField;
var Uints;
(function (Uints) {
    Uints["base"] = "uint";
    Uints["size8"] = "uint8";
    Uints["size16"] = "uint16";
    Uints["size24"] = "uint24";
    Uints["size32"] = "uint32";
    Uints["size40"] = "uint40";
    Uints["size48"] = "uint48";
    Uints["size56"] = "uint56";
    Uints["size64"] = "uint64";
    Uints["size72"] = "uint72";
    Uints["size80"] = "uint80";
    Uints["size88"] = "uint88";
    Uints["size96"] = "uint96";
    Uints["size104"] = "uint104";
    Uints["size112"] = "uint112";
    Uints["size120"] = "uint120";
    Uints["size128"] = "uint128";
    Uints["size136"] = "uint136";
    Uints["size144"] = "uint144";
    Uints["size152"] = "uint152";
    Uints["size160"] = "uint160";
    Uints["size168"] = "uint168";
    Uints["size176"] = "uint176";
    Uints["size184"] = "uint184";
    Uints["size192"] = "uint192";
    Uints["size200"] = "uint200";
    Uints["size208"] = "uint208";
    Uints["size216"] = "uint216";
    Uints["size224"] = "uint224";
    Uints["size232"] = "uint232";
    Uints["size240"] = "uint240";
    Uints["size248"] = "uint248";
    Uints["size256"] = "uint256";
})(Uints = exports.Uints || (exports.Uints = {}));
var Ints;
(function (Ints) {
    Ints["base"] = "int";
    Ints["size8"] = "int8";
    Ints["size16"] = "int16";
    Ints["size24"] = "int24";
    Ints["size32"] = "int32";
    Ints["size40"] = "int40";
    Ints["size48"] = "int48";
    Ints["size56"] = "int56";
    Ints["size64"] = "int64";
    Ints["size72"] = "int72";
    Ints["size80"] = "int80";
    Ints["size88"] = "int88";
    Ints["size96"] = "int96";
    Ints["size104"] = "int104";
    Ints["size112"] = "int112";
    Ints["size120"] = "int120";
    Ints["size128"] = "int128";
    Ints["size136"] = "int136";
    Ints["size144"] = "int144";
    Ints["size152"] = "int152";
    Ints["size160"] = "int160";
    Ints["size168"] = "int168";
    Ints["size176"] = "int176";
    Ints["size184"] = "int184";
    Ints["size192"] = "int192";
    Ints["size200"] = "int200";
    Ints["size208"] = "int208";
    Ints["size216"] = "int216";
    Ints["size224"] = "int224";
    Ints["size232"] = "int232";
    Ints["size240"] = "int240";
    Ints["size248"] = "int248";
    Ints["size256"] = "int256";
})(Ints = exports.Ints || (exports.Ints = {}));
exports.NumberTypeStrings = Object.values(Uints).concat(Object.values(Ints));
exports.selectNumberType = function (type) {
    if (type.charAt(0) === 'u') {
        return Uints[type];
    }
    else if (type.charAt(0) === 'i') {
        return Ints[type];
    }
    else {
        throw new Error("selectNumberType got a value it wasn't prepared for: " + type);
    }
};
//# sourceMappingURL=NumberField.js.map