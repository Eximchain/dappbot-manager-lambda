"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importDefault(require("react"));
var shared_1 = require("./shared");
var TextField_1 = __importDefault(require("../ui/TextField"));
var ByteField = function (_a) {
    var value = _a.value, onChange = _a.onChange, name = _a.name, props = __rest(_a, ["value", "onChange", "name"]);
    var update = shared_1.inputUpdater(onChange);
    // TODO: Explore how users would enter bytes and whether
    // I can validate the final size.
    return (react_1.default.createElement("div", { className: 'fieldGroup' },
        shared_1.displayLabel(name, props.displayName),
        react_1.default.createElement(TextField_1.default, { id: name, type: 'text', disabled: props.disabled, name: name, value: value, onChange: update })));
};
ByteField.defaultProps = { disabled: false };
exports.default = ByteField;
var Bytes;
(function (Bytes) {
    Bytes["dynamic"] = "bytes";
    Bytes["size1"] = "bytes1";
    Bytes["size2"] = "bytes2";
    Bytes["size3"] = "bytes3";
    Bytes["size4"] = "bytes4";
    Bytes["size5"] = "bytes5";
    Bytes["size6"] = "bytes6";
    Bytes["size7"] = "bytes7";
    Bytes["size8"] = "bytes8";
    Bytes["size9"] = "bytes9";
    Bytes["size10"] = "bytes10";
    Bytes["size11"] = "bytes11";
    Bytes["size12"] = "bytes12";
    Bytes["size13"] = "bytes13";
    Bytes["size14"] = "bytes14";
    Bytes["size15"] = "bytes15";
    Bytes["size16"] = "bytes16";
    Bytes["size17"] = "bytes17";
    Bytes["size18"] = "bytes18";
    Bytes["size19"] = "bytes19";
    Bytes["size20"] = "bytes20";
    Bytes["size21"] = "bytes21";
    Bytes["size22"] = "bytes22";
    Bytes["size23"] = "bytes23";
    Bytes["size24"] = "bytes24";
    Bytes["size25"] = "bytes25";
    Bytes["size26"] = "bytes26";
    Bytes["size27"] = "bytes27";
    Bytes["size28"] = "bytes28";
    Bytes["size29"] = "bytes29";
    Bytes["size30"] = "bytes30";
    Bytes["size31"] = "bytes31";
    Bytes["size32"] = "bytes32";
})(Bytes = exports.Bytes || (exports.Bytes = {}));
exports.ByteTypeStrings = Object.assign({}, Bytes);
//# sourceMappingURL=ByteField.js.map