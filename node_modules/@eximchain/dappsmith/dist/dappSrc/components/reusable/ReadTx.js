"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importStar(require("react"));
var ui_1 = require("./ui");
var FieldList_1 = __importDefault(require("./FieldList"));
// @ts-ignore Not present in this repo, but will be upon generation
var Contract_1 = __importDefault(require("../../state/Contract"));
exports.ReadTx = function (_a) {
    var fxn = _a.fxn, methodState = _a.methodState, props = __rest(_a, ["fxn", "methodState"]);
    var initialResult = fxn.outputs.map(function () { return ''; });
    var _b = __read(react_1.useState(initialResult), 2), result = _b[0], setResult = _b[1];
    var _c = __read(react_1.useState(''), 2), error = _c[0], setError = _c[1];
    var readValue = function () { return __awaiter(_this, void 0, void 0, function () {
        var _a, _b, paramNames, paramValues, paramTypes, methodName, newValue, newValue, e_1;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    paramNames = fxn.inputs.map(function (_a, index) {
                        var name = _a.name;
                        return name ? name : "arg-" + index;
                    });
                    paramValues = paramNames.map(function (name) { return methodState.params[name]; });
                    paramTypes = fxn.inputs.map(function (_a) {
                        var type = _a.type;
                        return type;
                    });
                    methodName = fxn.name + "(" + paramTypes.join(',') + ")";
                    _c.label = 1;
                case 1:
                    _c.trys.push([1, 6, , 7]);
                    if (!(fxn.outputs.length === 1)) return [3 /*break*/, 3];
                    return [4 /*yield*/, (_a = Contract_1.default.methods)[methodName].apply(_a, __spread(paramValues)).call()];
                case 2:
                    newValue = _c.sent();
                    setResult([newValue]);
                    return [3 /*break*/, 5];
                case 3: return [4 /*yield*/, (_b = Contract_1.default.methods)[methodName].apply(_b, __spread(paramValues)).call()];
                case 4:
                    newValue = _c.sent();
                    setResult(newValue);
                    _c.label = 5;
                case 5:
                    setError('');
                    return [3 /*break*/, 7];
                case 6:
                    e_1 = _c.sent();
                    setError(e_1.toString());
                    return [3 /*break*/, 7];
                case 7: return [2 /*return*/];
            }
        });
    }); };
    var resultRows = fxn.outputs.map(function (_a, index) {
        var name = _a.name;
        var label = (name || index) + ": ";
        return (react_1.default.createElement("li", { key: label },
            react_1.default.createElement("strong", null, label),
            (result[name || index] || '').toString()));
    });
    var errorMsg = error !== "" ? (react_1.default.createElement("p", null,
        react_1.default.createElement("strong", null, "Error:"),
        " ",
        error)) : null;
    return (react_1.default.createElement(ui_1.Box, null,
        react_1.default.createElement("h2", null, fxn.name),
        react_1.default.createElement(FieldList_1.default, { inputs: fxn.inputs, values: methodState, onChange: props.setter }),
        react_1.default.createElement(ui_1.Box, null,
            "Formatted Data: ",
            react_1.default.createElement("p", { style: { wordBreak: 'break-all' } }, props.data)),
        react_1.default.createElement(ui_1.Button, { onClick: readValue }, "Read"),
        react_1.default.createElement(ui_1.Box, null,
            errorMsg,
            react_1.default.createElement("strong", null, "Result: "),
            react_1.default.createElement("ul", null, resultRows))));
};
exports.default = exports.ReadTx;
//# sourceMappingURL=ReadTx.js.map