"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = __importStar(require("react"));
var NavItem_1 = __importDefault(require("./NavItem"));
exports.NavItem = NavItem_1.default;
var StyledNav_1 = require("./StyledNav");
var Nav = /** @class */ (function (_super) {
    __extends(Nav, _super);
    function Nav(props) {
        var _this = _super.call(this, props) || this;
        var key = _this.props.selectedKey != undefined ? _this.props.selectedKey : undefined;
        _this.state = {
            selectedKey: key
        };
        return _this;
    }
    Nav.prototype.onSelect = function (event, key) {
        this.setState({
            selectedKey: key
        });
        if (this.props.onSelect)
            this.props.onSelect(event, key);
    };
    Nav.prototype.getChildren = function () {
        var _this = this;
        var children = this.props.children;
        return React.Children.map(children, function (child, index) {
            var key = child.key != undefined ? child.key : index + 1;
            var originalOnClick = child.props.onClick;
            child = React.cloneElement(child, {
                key: key,
                selected: _this.state.selectedKey == key ? true : false,
                onClick: function (event) {
                    if (!child.props.disabled) {
                        _this.onSelect(event, key);
                        if (originalOnClick) {
                            originalOnClick.apply(child, event);
                        }
                    }
                }
            });
            return child;
        });
    };
    Nav.prototype.render = function () {
        var boundChildren = this.getChildren();
        return React.createElement(StyledNav_1.StyledNav, null, boundChildren);
    };
    Nav.defaultProps = {
        customClass: "nav",
        disabled: false
    };
    return Nav;
}(React.Component));
exports.Nav = Nav;
exports.default = Nav;
//# sourceMappingURL=Nav.js.map