"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = __importStar(require("react"));
var classnames_1 = __importDefault(require("classnames"));
require("./Input.css");
var Input = /** @class */ (function (_super) {
    __extends(Input, _super);
    function Input() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Input.prototype.render = function () {
        var _a = this.props, type = _a.type, inputRef = _a.inputRef, customClass = _a.customClass, placeholder = _a.placeholder, children = _a.children, disabled = _a.disabled, value = _a.value, className = _a.className, onChange = _a.onChange, name = _a.name;
        var classes = classnames_1.default(customClass, className);
        if (type == "select") {
            return (React.createElement("div", { className: "select_wrap" },
                React.createElement("select", { className: classes, ref: inputRef, placeholder: placeholder, disabled: disabled }, children ? children : null)));
        }
        else if ((type == "textarea")) {
            return (React.createElement("textarea", { name: name, value: value, className: classes, disabled: disabled, placeholder: placeholder, ref: inputRef, onChange: onChange }));
        }
        else {
            return (React.createElement("input", { type: type, name: name, value: value, className: classes, disabled: disabled, placeholder: placeholder, ref: inputRef, onChange: onChange }));
        }
    };
    Input.defaultProps = {
        customClass: "form-control",
        disabled: false,
        type: "text"
    };
    return Input;
}(React.Component));
exports.Input = Input;
exports.default = Input;
//# sourceMappingURL=Input.js.map