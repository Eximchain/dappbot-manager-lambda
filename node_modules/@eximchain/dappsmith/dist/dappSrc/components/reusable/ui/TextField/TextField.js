"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = __importStar(require("react"));
var classnames_1 = __importDefault(require("classnames"));
var Flyout_1 = __importDefault(require("./../Flyout"));
var Box_1 = __importDefault(require("./../Box"));
var Text_1 = __importDefault(require("./../Text"));
var StyledTextField_1 = __importDefault(require("./StyledTextField"));
var TextField = /** @class */ (function (_super) {
    __extends(TextField, _super);
    function TextField() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            focused: false,
            errorIsOpen: false
        };
        _this.handleChange = function (event) {
            _this.props.onChange(event);
        };
        _this.handleBlur = function (event) {
            if (_this.props.errorMessage) {
                _this.setState({ errorIsOpen: false });
            }
            if (_this.props.onBlur) {
                _this.props.onBlur(event);
            }
        };
        _this.handleFocus = function (event) {
            if (_this.props.errorMessage) {
                _this.setState({ errorIsOpen: true });
            }
            if (_this.props.onFocus) {
                _this.props.onFocus(event);
            }
        };
        _this.handleKeyDown = function (event) {
            if (_this.props.onKeyDown) {
                _this.props.onKeyDown(event);
            }
        };
        _this.textfieldRef = React.createRef();
        return _this;
    }
    TextField.getDerivedStateFromProps = function (props, state) {
        if (props.errorMessage !== state.errorMessage) {
            return {
                errorIsOpen: !!props.errorMessage,
                errorMessage: props.errorMessage
            };
        }
        return null;
    };
    TextField.prototype.componentDidMount = function () {
        this.textfield = this.textfieldRef.current;
    };
    TextField.prototype.render = function () {
        var _this = this;
        var _a = this.props, autoComplete = _a.autoComplete, disabled = _a.disabled, errorMessage = _a.errorMessage, hasError = _a.hasError, id = _a.id, idealErrorDirection = _a.idealErrorDirection, name = _a.name, placeholder = _a.placeholder, type = _a.type, value = _a.value;
        var classes = classnames_1.default("textField", disabled ? "disabled" : "enabled", hasError || errorMessage ? "errored" : "normal");
        // type='number' doesn't work on ios safari without a pattern
        // https://stackoverflow.com/questions/14447668/input-type-number-is-not-showing-a-number-keypad-on-ios
        var pattern = type === "number" ? "\\d*" : undefined;
        return (React.createElement("span", null,
            React.createElement(StyledTextField_1.default, { "aria-describedby": errorMessage && this.state.focused
                    ? id + "-gestalt-error"
                    : undefined, "aria-invalid": errorMessage || hasError ? "true" : "false", autoComplete: autoComplete, className: classes, disabled: disabled, id: id, name: name, onBlur: this.handleBlur, onChange: this.handleChange, onFocus: this.handleFocus, onKeyDown: this.handleKeyDown, pattern: pattern, placeholder: placeholder, innerRef: this.textfieldRef, type: type, value: value }),
            errorMessage && this.state.errorIsOpen && (React.createElement(Flyout_1.default, { anchor: this.textfield, color: "orange", idealDirection: idealErrorDirection, onDismiss: function () { return _this.setState({ errorIsOpen: false }); }, shouldFocus: false, size: "sm", positionRelativeToAnchor: true },
                React.createElement(Box_1.default, { padding: 3 },
                    React.createElement(Text_1.default, { bold: true, color: "white" },
                        React.createElement("span", { id: id + "-gestalt-error" }, errorMessage)))))));
    };
    TextField.defaultProps = {
        disabled: false,
        hasError: false,
        idealErrorDirection: "right",
        type: "text"
    };
    return TextField;
}(React.Component));
exports.default = TextField;
//# sourceMappingURL=TextField.js.map