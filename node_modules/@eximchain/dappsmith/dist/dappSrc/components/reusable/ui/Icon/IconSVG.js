"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = __importStar(require("react"));
var classnames_1 = __importDefault(require("classnames"));
var index_1 = __importDefault(require("./../icons/index"));
var StyledIcon_1 = require("./StyledIcon");
var IconSVG = /** @class */ (function (_super) {
    __extends(IconSVG, _super);
    function IconSVG() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            loading: true,
            paths: [],
            viewBox: "0 0 24 24"
        };
        _this.parseSVG = function (str) {
            var parser = new DOMParser();
            return parser.parseFromString(str, "text/xml");
        };
        _this.getSVGXML = function (url) { return __awaiter(_this, void 0, void 0, function () {
            var res, svgString;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, fetch(url)];
                    case 1:
                        res = _a.sent();
                        return [4 /*yield*/, res.text()];
                    case 2:
                        svgString = _a.sent();
                        return [2 /*return*/, this.parseSVG(svgString)];
                }
            });
        }); };
        _this.getPathsWithAttributes = function (iconType, svgPaths) {
            var paths = [];
            for (var i = 0; i < svgPaths.length; i++) {
                var d = svgPaths[i].getAttribute("d") || undefined;
                var fill = svgPaths[i].getAttribute("fill") || undefined;
                var stroke = svgPaths[i].getAttribute("stroke") || undefined;
                var strokeWidth = svgPaths[i].getAttribute("stroke-width") || undefined;
                if (iconType === "duotone") {
                    paths.push(React.createElement("path", { key: i, d: d, fill: fill, stroke: stroke }));
                }
                else {
                    paths.push(React.createElement("path", { key: i, d: d, fill: _this.props.color, stroke: stroke, strokeWidth: strokeWidth }));
                }
            }
            return paths;
        };
        return _this;
    }
    IconSVG.prototype.componentDidMount = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, dangerouslySetSvgPath, icon, type, paths, viewBox, svgXML, svgNode, svgPaths, viewBoxAttr, e_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this.props, dangerouslySetSvgPath = _a.dangerouslySetSvgPath, icon = _a.icon, type = _a.type;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 5, , 6]);
                        paths = [];
                        viewBox = "0 0 24 24";
                        type = type ? type : "thick";
                        if (!(icon && index_1.default[type][icon])) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.getSVGXML(String(index_1.default[type][icon]))];
                    case 2:
                        svgXML = _b.sent();
                        svgNode = svgXML.getElementsByTagName("svg");
                        svgPaths = svgXML.getElementsByTagName("path");
                        if (svgNode && svgNode.length) {
                            viewBoxAttr = svgNode[0].getAttribute("viewBox");
                            viewBoxAttr && (viewBox = viewBoxAttr);
                        }
                        paths = this.getPathsWithAttributes(type, svgPaths);
                        return [3 /*break*/, 4];
                    case 3:
                        if (dangerouslySetSvgPath && dangerouslySetSvgPath.__path) {
                            paths.push(React.createElement("path", { key: 0, d: dangerouslySetSvgPath.__path }));
                        }
                        _b.label = 4;
                    case 4:
                        this.setState({
                            viewBox: viewBox,
                            paths: paths,
                            loading: false
                        });
                        return [3 /*break*/, 6];
                    case 5:
                        e_1 = _b.sent();
                        return [3 /*break*/, 6];
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    IconSVG.prototype.render = function () {
        var _a = this.props, accessibilityLabel = _a.accessibilityLabel, icon = _a.icon, inline = _a.inline, size = _a.size, color = _a.color;
        var _b = this.state, viewBox = _b.viewBox, paths = _b.paths;
        var classes = classnames_1.default("icon", icon, inline, color);
        var ariaHidden = accessibilityLabel === "" ? true : null;
        if (this.state.loading) {
            return null;
        }
        else {
            return (React.createElement(StyledIcon_1.StyledIconSVG, { className: classes, height: size, width: size, viewBox: viewBox ? viewBox : "0 0 24 24", "aria-hidden": ariaHidden, "aria-label": accessibilityLabel, role: "img" },
                React.createElement("title", null, accessibilityLabel),
                paths));
        }
    };
    IconSVG.defaultProps = {
        size: 16,
        type: "thick"
    };
    return IconSVG;
}(React.Component));
exports.IconSVG = IconSVG;
exports.default = IconSVG;
//# sourceMappingURL=IconSVG.js.map