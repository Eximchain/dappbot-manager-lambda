"use strict";
// @flow
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var style_1 = require("./style");
// Adds a classname when a property is present.
//
//     <Box top />
//
exports.toggle = function () {
    var classNames = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        classNames[_i] = arguments[_i];
    }
    return function (val) {
        return val ? style_1.fromClassName.apply(void 0, __spread(classNames)) : style_1.identity();
    };
};
// Maps string values to classes
//
//     <Box alignItems="center" />
//
exports.mapping = function (map) { return function (val) {
    return Object.prototype.hasOwnProperty.call(map, val)
        ? style_1.fromClassName(map[val])
        : style_1.identity();
}; };
// Maps a range of integers to a range of classnames
//
//     <Box padding={1} />
//
exports.range = function (scale) { return function (n) {
    return style_1.fromClassName("" + scale + (n < 0 ? "N" + Math.abs(n) : n));
}; };
// Like `range`, maps a range of integers to a range of classnames, excluding
// zero values.
//
//     <Box padding={0} />
exports.rangeWithoutZero = function (scale) { return function (n) {
    return n === 0 ? style_1.identity() : exports.range(scale)(n);
}; };
// Binds a string classname to the value in an object. Useful when interacting
// with ranges that need to come dynamically from a style object. This is
// similar to the NPM package 'classnames/bind'.
exports.bind = function (fn, scope) { return function (val) { return style_1.mapClassName(function (name) { return scope[name]; })(fn(val)); }; };
// This takes a series of the previously defined functors, runs them all
// against a value and returns the set of their classnames.
exports.union = function () {
    var fns = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        fns[_i] = arguments[_i];
    }
    return function (val) {
        return style_1.concat(fns.map(function (fn) { return fn(val); }));
    };
};
//# sourceMappingURL=transform.js.map