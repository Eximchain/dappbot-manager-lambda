"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var ethUtils = __importStar(require("ethereumjs-util"));
var bignumber_js_1 = require("bignumber.js");
bignumber_js_1.BigNumber.config({ EXPONENTIAL_AT: 18 });
exports.BigNumber = ethUtils.BN;
var isHex = function (str) { return typeof str === "string" && str.startsWith("0x"); };
exports.toBN = function (str) { return new bignumber_js_1.BigNumber(str); };
exports.hexToNumberString = function (str) { return exports.toBN(str).toString(10); };
exports.isAddress = function (str) { return isHex(str) && str.length === 42; };
exports.toBigNumber = function (str) {
    /**
     web3.utils.isHex(estimatedGas)
        ? new BigNumber(web3.utils.hexToNumberString(estimatedGas))
        : new BigNumber(estimatedGas)
     */
    return isHex(str) ? new bignumber_js_1.BigNumber(exports.hexToNumberString(str)) : new bignumber_js_1.BigNumber(str);
};
exports.weiToEther = function (valWei) {
    return exports.toBigNumber(valWei).div(new bignumber_js_1.BigNumber("1000000000000000000"));
};
exports.etherToGwei = function (valEther) {
    return new bignumber_js_1.BigNumber(valEther).times(new bignumber_js_1.BigNumber("1000000000"));
};
exports.etherToWei = function (valEther) {
    return new bignumber_js_1.BigNumber(valEther).times(new bignumber_js_1.BigNumber("1000000000000000000"));
};
exports.toUsd = function (etherAmount, etherPriceUSD) {
    if (etherAmount === void 0) { etherAmount = "0"; }
    return parseFloat(exports.toBigNumber(etherAmount)
        .times(exports.toBigNumber(etherPriceUSD))
        .toString()).toFixed(2);
};
exports.networkIdToName = function (networkId) {
    switch (networkId) {
        case 1:
            return "Main";
        case 3:
            return "Ropsten";
        case 4:
            return "Rinkeby";
        case 42:
            return "Kovan";
        default:
            return "Private";
    }
};
// FIXME wrapper for EthTools.formatBalance
exports.formatBalance = function () { };
function formatTokenCount(value, decimals) {
    return Number(value / Math.pow(10, decimals)).toString();
}
exports.formatTokenCount = formatTokenCount;
function formatFunctionName(functionName) {
    if (functionName === undefined) {
        throw new Error("formatFunctionName() expects a non-empty string");
    }
    return functionName
        .slice(0, functionName.indexOf("("))
        .replace(/_+/g, " ")
        .replace(/([A-Z]+|[0-9]+)/g, " $1")
        .toLowerCase()
        .trim();
}
exports.formatFunctionName = formatFunctionName;
//# sourceMappingURL=eximUtils.js.map