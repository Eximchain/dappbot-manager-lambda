"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = __importStar(require("react"));
function queryFocusableAll(el) {
    var selector = [
        "a[href]",
        "area[href]",
        "input:not([disabled])",
        "select:not([disabled])",
        "textarea:not([disabled])",
        "button:not([disabled])",
        "iframe",
        "object",
        "embed",
        '[tabindex="-1"]',
        '[tabindex="0"]',
        "[contenteditable]",
        "audio[controls]",
        "video[controls]",
        "summary"
    ].join(",");
    return el.querySelectorAll(selector);
}
var focusElement = function (el) {
    if (typeof el.focus === "function") {
        el.focus();
    }
};
var TrapFocusBehavior = /** @class */ (function (_super) {
    __extends(TrapFocusBehavior, _super);
    function TrapFocusBehavior() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.setElRef = React.createRef();
        _this.handleFocus = function (event) {
            if (!_this.el ||
                (event.target instanceof Node && _this.el.contains(event.target))) {
                return;
            }
            event.stopPropagation();
            event.preventDefault();
            _this.focusFirstChild();
        };
        _this.focusFirstChild = function () {
            var el = _this.el;
            if (el) {
                focusElement(queryFocusableAll(el)[0]);
            }
        };
        return _this;
    }
    TrapFocusBehavior.prototype.componentDidMount = function () {
        this.el = this.setElRef.current;
        this.previouslyFocusedEl = document.activeElement;
        this.focusFirstChild();
        document.addEventListener("focus", this.handleFocus, true);
    };
    TrapFocusBehavior.prototype.componentWillUnmount = function () {
        document.removeEventListener("focus", this.handleFocus, true);
        if (this.previouslyFocusedEl) {
            focusElement(this.previouslyFocusedEl);
        }
    };
    TrapFocusBehavior.prototype.render = function () {
        return React.createElement("div", { ref: this.setElRef }, this.props.children);
    };
    return TrapFocusBehavior;
}(React.Component));
exports.default = TrapFocusBehavior;
//# sourceMappingURL=TrapFocusBehavior.js.map