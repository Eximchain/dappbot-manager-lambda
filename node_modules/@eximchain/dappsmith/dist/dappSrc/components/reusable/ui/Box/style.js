"use strict";
/* @flow */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.identity = function () { return ({
    className: new Set(),
    inlineStyle: {}
}); };
exports.fromClassName = function () {
    var classNames = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        classNames[_i] = arguments[_i];
    }
    return ({
        className: new Set(classNames),
        inlineStyle: {}
    });
};
exports.fromInlineStyle = function (inlineStyle) { return ({
    className: new Set(),
    inlineStyle: inlineStyle
}); };
exports.concat = function (styles) {
    return styles.reduce(function (_a, _b) {
        var classNameA = _a.className, inlineStyleA = _a.inlineStyle;
        var classNameB = _b.className, inlineStyleB = _b.inlineStyle;
        return ({
            className: new Set(__spread(classNameA, classNameB)),
            inlineStyle: __assign({}, inlineStyleA, inlineStyleB)
        });
    }, exports.identity());
};
exports.mapClassName = function (fn) { return function (_a) {
    var className = _a.className, inlineStyle = _a.inlineStyle;
    return ({
        className: new Set(Array.from(className).map(fn)),
        inlineStyle: inlineStyle
    });
}; };
exports.toProps = function (_a) {
    var className = _a.className, inlineStyle = _a.inlineStyle;
    var props = {};
    if (className.size > 0) {
        // Sorting here ensures that classNames are always stable, reducing diff
        // churn. Box usually has a small number of properties so it's not a perf
        // concern.
        props.className = Array.from(className)
            .sort()
            .join(" ");
    }
    if (Object.keys(inlineStyle).length > 0) {
        props.style = inlineStyle;
    }
    return props;
};
//# sourceMappingURL=style.js.map