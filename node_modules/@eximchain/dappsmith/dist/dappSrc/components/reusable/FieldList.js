"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importStar(require("react"));
var fields_1 = require("./fields");
exports.FieldList = function (_a) {
    var inputs = _a.inputs, onChange = _a.onChange, values = _a.values;
    var fields = inputs.map(function (_a, index) {
        var name = _a.name, type = _a.type;
        var fieldName = name || "arg-" + index;
        var fieldType = fields_1.selectFieldType(type);
        var namedSetter = function (val) { onChange(fieldName, val); };
        var value = values.params[fieldName];
        switch (fieldType) {
            case (fields_1.Fields.Address):
                return (react_1.default.createElement(fields_1.AddressField, { name: fieldName, value: value, key: fieldName, onChange: namedSetter, displayName: fieldName }));
            case (fields_1.Fields.Boolean):
                return (react_1.default.createElement(fields_1.BooleanField, { name: fieldName, value: value, key: fieldName, onChange: namedSetter, displayName: fieldName }));
            case (fields_1.Fields.Bytes):
                return (react_1.default.createElement(fields_1.ByteField, { name: fieldName, value: value, key: fieldName, onChange: namedSetter, displayName: fieldName }));
            case (fields_1.Fields.Number):
                // @ts-ignore Make Typescript shut up about whether
                // this will be a correct string
                var numType = type;
                return (react_1.default.createElement(fields_1.NumberField, { name: fieldName, value: value, size: numType, key: fieldName, onChange: namedSetter, displayName: fieldName }));
            case (fields_1.Fields.String):
                return (react_1.default.createElement(fields_1.StringField, { name: fieldName, value: value, key: fieldName, onChange: namedSetter, displayName: fieldName }));
        }
    });
    return (react_1.default.createElement(react_1.Fragment, null, fields));
};
exports.default = exports.FieldList;
//# sourceMappingURL=FieldList.js.map