import React, { useState, Fragment, FunctionComponent, FormEvent } from 'react';
import { FieldProps, inputUpdater, displayLabel, inputValidator } from './shared';
import TextField, { eventData } from '../ui/TextField';

interface Props extends FieldProps {
    value: string
    onChange: (newVal:string)=>void
}

const invalidAddrErr = "Please enter a valid hexademical address.  It should begin with 0x and be 42 characters long."

const isValid = (newVal:string) => {
    return /^0x[a-fA-F0-9]+$/.test(newVal) && newVal.length == 42;
}

const clean = (newVal:string) => {
    let prefix = newVal.slice(0,2);
    let hasPrefix = ['0x','0X'].includes(prefix);
    let val = hasPrefix ? newVal.slice(2) : newVal;
    let cleaned =  val.replace(/[^a-fA-f0-9]/g, '');
    return hasPrefix ? prefix + cleaned : cleaned;
}

const AddressField: FunctionComponent<Props> = ({value, onChange, name, displayName, ...props}) => {

    const [errorMsg, setError] = useState("");

    const update = inputUpdater(onChange, { clean, withError : setError })

    const validator = inputValidator(isValid, setError, invalidAddrErr);

    return (
        <div className='fieldGroup'>
            { displayLabel(name, displayName) }
            <TextField type='text' 
                id={name}
                name={name} 
                value={value} 
                disabled={props.disabled}
                onChange={update} 
                hasError={errorMsg != ""}
                errorMessage={errorMsg}
                onBlur={validator} />
        </div>
    )
}

AddressField.defaultProps = { disabled : false };

export default AddressField;