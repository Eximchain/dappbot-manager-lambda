import React, { FunctionComponent, useState } from 'react';
import { Box } from './ui';
import { MethodAbi } from 'ethereum-types';
import FieldList from './FieldList';
// @ts-ignore Not present in this repo, but will be upon generation
import { MethodState, ParamValue } from '../../state/reusable/types';
// @ts-ignore Not present in this repo, but will be upon generation
import Contract from '../../state/Contract';
import { Typography } from './ui/NavLeft/Typography';
import Button from './ui/NavLeft/Button';


interface Props {
    fxn: MethodAbi,
    methodState: MethodState,
    setter: (name:string,value:ParamValue)=>void,
    data: string
}

export const ReadTx:FunctionComponent<Props> = ({fxn, methodState, ...props}) => {
    const initialResult:ParamValue[] = fxn.outputs.map(()=>'');
    const [result, setResult] = useState(initialResult);
    const [error, setError] = useState('');

    const readValue = async () => {
        const paramNames = fxn.inputs.map(({name}, index)=>name ? name : `arg-${index}`);
        const paramValues = paramNames.map((name)=>methodState.params[name]);
        const paramTypes = fxn.inputs.map(({type})=>type)
        const methodName = `${fxn.name}(${paramTypes.join(',')})`;
        try {
            if (fxn.outputs.length === 1){
                let newValue:ParamValue = await Contract.methods[methodName](...paramValues).call();
                setResult([newValue]);
            } else {
                let newValue:ParamValue[] = await Contract.methods[methodName](...paramValues).call();
                setResult(newValue);
            }
            setError('');
        } catch (e) {
            setError(e.toString())
        }
    }

    const resultRows = fxn.outputs.map(({name}, index)=>{
        let label = `${name || index}: `;
        return (
            <li key={label}><strong>{label}</strong>{(result[name || index] || '').toString()}</li>
        )
    })

    const errorMsg = error !== "" ? (
        <p><strong>Error:</strong> {error}</p>
    ) : null;

    return (
        <Box>
             <Typography h1>{fxn.name}</Typography>
            <FieldList inputs={fxn.inputs} values={methodState} onChange={props.setter} />
            <br />
            <Box>Formatted Data: <p style={{wordBreak:'break-all'}}><Typography useFor={'content'}>{props.data}</Typography></p></Box>
            <br />
            
            <Button onClick={readValue}>Read</Button>
            <Box>
                <p className="caption">
                { errorMsg }
                <strong>Result: </strong>
                <ul>
                    { resultRows }
                </ul>
                </p>
            </Box>

        </Box>
    )
}

export default ReadTx;