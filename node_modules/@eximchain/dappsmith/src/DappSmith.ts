import { MethodAbi } from 'ethereum-types';
const shell = require('shelljs');
const fs = require('fs-extra');
const path = require('path');

import ReducksGenerator from '@eximchain/abi2reducks';
import { writeTemplateToPath } from './utils';
import { pascalCase, camelCase } from './handlebars';

const REQUIRED_PACKAGES = [
    'redux',
    'react-redux',
    'redux-react-hook',
    'redux-starter-kit',
    '@types/react',
    '@types/react-dom',
    '@types/react-redux',
    '@types/jest',
    '@types/classnames',
    '@types/styled-components@^4.1.12',
    'ethereumjs-util',
    'ethereum-types',
    'bignumber.js',
    'classnames',
    'styled-components@^3.2.3',
    'typescript',
    'lodash.keyby',
    'lodash.merge',
    'lodash.sortby',
    'fs-extra',
    'web3-utils',
    'web3',
    'string-similarity'
]

type DappSmithInput = {
    name: string,
    abi: MethodAbi[]
    contract_addr: string,
    web3URL: string
}

class DappSmith {
    constructor({name, abi, contract_addr, web3URL}:DappSmithInput){
        this.CONTRACT_NAME = name;
        this.ABI = abi.filter(fxn => fxn.type === 'function');
        this.DAPP_NAME = `${this.CONTRACT_NAME.toLowerCase()}-dapp`;
        this.START_DIR = process.cwd();
        this.DAPP_DIR = `${this.START_DIR}/${this.DAPP_NAME}`
        this.SRC_DIR = `${this.DAPP_DIR}/src`;
        this.COMPONENTS_DIR = `${this.SRC_DIR}/components`
        this.REDUX_DIR = `${this.SRC_DIR}/state`
        this.TX_DUCKS_DIR = `${this.REDUX_DIR}/txDucks`;
        this.readFxns = this.ABI.filter(fxn => fxn.constant)
        this.writeFxns = this.ABI.filter(fxn => !fxn.constant)
        this.DAPPSRC_DIR = path.resolve(__dirname, '../src/dappSrc');
        this.DAPPSRC_COMPONENTS_DIR = path.resolve(this.DAPPSRC_DIR, 'components');
        this.CONTRACT_ADDR = contract_addr;
        this.WEB3_URL = web3URL;
    }

    private CONTRACT_ADDR:string;
    private WEB3_URL:string;
    private CONTRACT_NAME:string;
    private DAPPSRC_DIR:string;
    private DAPPSRC_COMPONENTS_DIR:string;
    private DAPP_NAME:string;
    private START_DIR:string;
    private DAPP_DIR:string;
    private SRC_DIR:string;
    private REDUX_DIR:string;
    private COMPONENTS_DIR: string;
    private TX_DUCKS_DIR:string;
    private ABI:MethodAbi[];
    private readFxns:MethodAbi[];
    private writeFxns:MethodAbi[];

    public generate(){
        fs.ensureDirSync(this.START_DIR);
        shell.cd(`${this.START_DIR}`);
        if (shell.exec(`npx create-react-app ${this.DAPP_NAME} --typescript`).code == 0){
            fs.copySync(path.resolve(__dirname, '../tsconfig.json'), `${this.DAPP_DIR}/tsconfig.json`);
            fs.ensureDirSync(this.DAPP_NAME);
            shell.cd(this.DAPP_NAME)
            this.installPackages();
            shell.cd(this.SRC_DIR);
            fs.removeSync('App.js');
            this.initRedux();
            this.initComponents();
            shell.cd(this.SRC_DIR);
            fs.ensureDirSync("fonts");
            fs.copySync(`${this.DAPPSRC_DIR}/SampleApp.tsx`,`${this.SRC_DIR}/App.tsx`);
            fs.copySync(`${this.DAPPSRC_DIR}/fonts.css`,`${this.SRC_DIR}/fonts.css`);
            fs.copySync(`${this.DAPPSRC_DIR}/app.css`,`${this.SRC_DIR}/app.css`);
            fs.copySync(`${this.DAPPSRC_DIR}/fonts`,`${this.SRC_DIR}/fonts`);
            fs.copySync(`${this.DAPPSRC_DIR}/variable.css`,`${this.SRC_DIR}/variable.css`);
            fs.writeJsonSync('./Contract.json', this.ABI)
            shell.cd(this.DAPP_DIR);
            shell.exec('git add -A; git commit -m "Initial codegen commit"')
        } else {
            console.log(`\n\nERROR ON 'npm init react-app ${this.DAPP_NAME}', failing out.`)
        }
    }

    public build(){
        shell.cd(this.DAPP_DIR);
        shell.exec('npm run build');
    }

    public start(){
        shell.cd(this.DAPP_DIR);
        shell.exec('npm run start');
    }

    private installPackages = () => {
        shell.cd(this.DAPP_DIR);
        shell.exec(`npm i --save ${REQUIRED_PACKAGES.join(' ')}`)
    }
    
    private initRedux = () => {
        shell.cd(this.SRC_DIR);
        fs.ensureDirSync('state')
        shell.cd(this.REDUX_DIR);
        const duckGen = new ReducksGenerator({
            abi: this.ABI,
            address: this.CONTRACT_ADDR,
            web3URL: this.WEB3_URL
        });
        duckGen.generate();
    }

    private initComponents = () => {
        shell.cd(this.SRC_DIR);
        this.nestedCreateDir('components', ()=>{
            writeTemplateToPath('./templates/root_component_index.hbs', 'index.tsx');
            fs.copySync(`${this.DAPPSRC_COMPONENTS_DIR}/layout`, `${this.COMPONENTS_DIR}/layout`)
            fs.copySync(`${this.DAPPSRC_COMPONENTS_DIR}/reusable`, `${this.COMPONENTS_DIR}/reusable`)
            this.nestedCreateDir('txMethods', () => {
                writeTemplateToPath('./templates/txMethods_index.hbs', 'index.tsx');
                this.nestedCreateDir('reads', () => {
                    writeTemplateToPath('./templates/components_index.hbs', 'index.tsx', { methods : this.readFxns })
                    writeTemplateToPath('./templates/nameToComponent.hbs', 'nameToComponent.tsx', { methods : this.readFxns })
                    this.readFxns.forEach((fxn)=>{
                        writeTemplateToPath('./templates/readComponent.hbs', `${pascalCase(fxn.name)}.tsx`, this.componentTemplateArgs(fxn))
                    })
                })
                this.nestedCreateDir('writes', () => {
                    writeTemplateToPath('./templates/components_index.hbs', 'index.tsx', { methods : this.writeFxns })
                    writeTemplateToPath('./templates/nameToComponent.hbs', 'nameToComponent.tsx', { methods : this.writeFxns })
                    this.writeFxns.forEach((fxn)=>{
                        writeTemplateToPath('./templates/writeComponent.hbs', `${pascalCase(fxn.name)}.tsx`, this.componentTemplateArgs(fxn))
                    })
                })
            })
        })
    }

    private componentTemplateArgs = (method:MethodAbi) => {
        return {
            method : method,
            camelName : camelCase(method.name),
            pascalName : pascalCase(method.name)
        }
    }

    private nestedCreateDir = (dirName:string, nestedActions=()=>{}) => {
        fs.ensureDirSync(dirName);
        shell.cd(dirName);
        nestedActions();
        shell.cd('..');
    }
}

export default DappSmith;