import { MethodAbi } from 'ethereum-types';
const shell = require('shelljs');
const fs = require('fs-extra');
const path = require('path');

import ReducksGenerator from '@eximchain/abi2reducks';
import { writeTemplateToPath, nestedCreateDir, componentTemplateArgs } from './utils';
import { pascalCase } from './handlebars';

export type DappSmithInput = {
    name: string,
    abi: MethodAbi[]
    contract_addr: string,
    web3URL: string
}

export type DappSmithData = {
    CONTRACT_NAME: string,
    DAPP_NAME: string,
    START_DIR: string,
    DAPP_DIR: string,
    SRC_DIR: string,
    COMPONENTS_DIR: string,
    REDUX_DIR: string,
    DAPPSRC_DIR: string,
    DAPPSRC_COMPONENTS_DIR: string,
    CONTRACT_ADDR: string,
    WEB3_URL: string,
    ABI: MethodAbi[],
    readFxns: MethodAbi[],
    writeFxns: MethodAbi[]
}

type DappSmithOptions = {
    build?: boolean,
    start?: boolean
}

const build = (data:DappSmithData) => {
    shell.cd(data.DAPP_DIR);
    shell.exec('npm run build');
}

const start = (data:DappSmithData) => {
    shell.cd(data.DAPP_DIR);
    shell.exec('npm run start');
}

export const generate = (input:DappSmithInput, options:DappSmithOptions={build:false,start:false}) => {
    const data = getDappSmithData(input);
    fs.ensureDirSync(data.START_DIR);
    shell.cd(`${data.START_DIR}`);
    if (shell.exec(`npx create-react-app ${data.DAPP_NAME} --typescript`).code == 0){
        fs.copySync(path.resolve(__dirname, '../tsconfig.json'), `${data.DAPP_DIR}/tsconfig.json`);
        fs.ensureDirSync(data.DAPP_NAME);
        shell.cd(data.DAPP_NAME)
        installPackages(data);
        shell.cd(data.SRC_DIR);
        fs.removeSync('App.js');
        initRedux(data);
        initComponents(data);
        shell.cd(data.SRC_DIR);
        fs.ensureDirSync("fonts");
        fs.copySync(`${data.DAPPSRC_DIR}/SampleApp.tsx`,`${data.SRC_DIR}/App.tsx`);
        fs.copySync(`${data.DAPPSRC_DIR}/fonts.css`,`${data.SRC_DIR}/fonts.css`);
        fs.copySync(`${data.DAPPSRC_DIR}/app.css`,`${data.SRC_DIR}/app.css`);
        fs.copySync(`${data.DAPPSRC_DIR}/fonts`,`${data.SRC_DIR}/fonts`);
        fs.copySync(`${data.DAPPSRC_DIR}/variable.css`,`${data.SRC_DIR}/variable.css`);
        fs.writeJsonSync('./Contract.json', data.ABI)
        shell.cd(data.DAPP_DIR);
        shell.exec('git add -A; git commit -m "Initial codegen commit"')
        if (options.build){
            build(data);
        }
        if (options.start){
            start(data);
        }
    } else {
        console.log(`\n\nERROR ON 'npm init react-app ${data.DAPP_NAME}', failing out.`)
    }
}

const REQUIRED_PACKAGES = [
    'redux',
    'react-redux',
    'redux-react-hook',
    'redux-starter-kit',
    '@types/node',
    '@types/react',
    '@types/react-dom',
    '@types/react-redux',
    '@types/jest',
    '@types/classnames',
    '@types/styled-components@^4.1.12',
    'ethereumjs-util',
    'ethereum-types',
    'bignumber.js',
    'classnames',
    'styled-components@^3.2.3',
    'typescript',
    'lodash.keyby',
    'lodash.merge',
    'lodash.sortby',
    'fs-extra',
    'web3-utils',
    'web3',
    'string-similarity'
]

const installPackages = (data:DappSmithData) => {
    shell.cd(data.DAPP_DIR);
    shell.exec(`npm i --save ${REQUIRED_PACKAGES.join(' ')}`)
}

const initRedux = (data:DappSmithData) => {
    shell.cd(data.SRC_DIR);
    fs.ensureDirSync('state')
    shell.cd(data.REDUX_DIR);
    ReducksGenerator.generate({
        abi: data.ABI,
        address: data.CONTRACT_ADDR,
        web3URL: data.WEB3_URL
    })
}

const initComponents = (data:DappSmithData) => {
    shell.cd(data.SRC_DIR);
    nestedCreateDir('components', ()=>{
        writeTemplateToPath('./templates/root_component_index.hbs', 'index.tsx');
        fs.copySync(`${data.DAPPSRC_COMPONENTS_DIR}/layout`, `${data.COMPONENTS_DIR}/layout`)
        fs.copySync(`${data.DAPPSRC_COMPONENTS_DIR}/reusable`, `${data.COMPONENTS_DIR}/reusable`)
        nestedCreateDir('txMethods', () => {
            writeTemplateToPath('./templates/txMethods_index.hbs', 'index.tsx');
            nestedCreateDir('reads', () => {
                writeTemplateToPath('./templates/components_index.hbs', 'index.tsx', { methods : data.readFxns })
                writeTemplateToPath('./templates/nameToComponent.hbs', 'nameToComponent.tsx', { methods : data.readFxns })
                data.readFxns.forEach((fxn)=>{
                    writeTemplateToPath('./templates/readComponent.hbs', `${pascalCase(fxn.name)}.tsx`, componentTemplateArgs(fxn))
                })
            })
            nestedCreateDir('writes', () => {
                writeTemplateToPath('./templates/components_index.hbs', 'index.tsx', { methods : data.writeFxns })
                writeTemplateToPath('./templates/nameToComponent.hbs', 'nameToComponent.tsx', { methods : data.writeFxns })
                data.writeFxns.forEach((fxn)=>{
                    writeTemplateToPath('./templates/writeComponent.hbs', `${pascalCase(fxn.name)}.tsx`, componentTemplateArgs(fxn))
                })
            })
        })
    })
}

export const getDappSmithData:(input:DappSmithInput)=>DappSmithData = ({name, abi, contract_addr, web3URL }:DappSmithInput) => {
    const cwd = process.cwd();
    const dappName = `${name.toLowerCase()}-dapp`
    const abiFxns = abi.filter(fxn => fxn.type === 'function')
    return {
        CONTRACT_NAME: name,
        DAPP_NAME: dappName,
        START_DIR: cwd,
        DAPP_DIR: `${cwd}/${dappName}`,
        SRC_DIR: `${cwd}/${dappName}/src`,
        COMPONENTS_DIR: `${cwd}/${dappName}/src/components`,
        REDUX_DIR: `${cwd}/${dappName}/src/state`,
        DAPPSRC_DIR: path.resolve(__dirname, '../src/dappSrc'),
        DAPPSRC_COMPONENTS_DIR: path.resolve(__dirname, '../src/dappSrc/components'),
        CONTRACT_ADDR: contract_addr,
        WEB3_URL: web3URL,
        ABI: abiFxns,
        readFxns: abiFxns.filter(fxn => fxn.constant),
        writeFxns: abiFxns.filter(fxn => !fxn.constant)
    }
}